Q8.5:
Let G=(V,E) be a connected directed graph with non-negative edge weights,
let s and t be vertices of G, and let H be a subgraph of G obtained by deleting
some edges. Suppose we want to reinsert exactly one edge from G back
into H, so that the shortest path from s to t in the resulting graph is as short
as possible. Describe and analyze an algorithm that chooses the best edge
to reinsert, in O(E log V ) time.

A:
run Dijkstra in both G and H, get shortest paths g and h.
let g-h denotes set of edges that in g but not in h.
foreach edge (u, v) in (g-h):
  let path l be the path from u to v in h.
  the weight of l is W(l)
  improvement = W(l) - W(u, v)
keep track of the mmaximum improvement.
